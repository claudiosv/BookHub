-- MySQL Script generated by MySQL Workbench
-- Fri Jan 26 20:15:10 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`authors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`authors` (
  `id` INT(11) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `bio` TINYTEXT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`categories` (
  `id` INT(10) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`publishers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`publishers` (
  `id` INT(11) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`users` (
  `id` INT(11) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(60) NOT NULL,
  `is_admin` TINYINT(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`magnet_uri`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`magnet_uri` (
  `id` INT(11) NOT NULL,
  `exact_topic` TEXT NOT NULL,
  `display_name` VARCHAR(250) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`torrents`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`torrents` (
  `id` INT(11) NOT NULL,
  `magnet_id` INT(11) NOT NULL,
  `seeders` INT(11) NOT NULL,
  `leechers` INT(11) NOT NULL,
  `date_added` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `date_updated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `archived` TINYINT(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  INDEX `magnet_id` (`magnet_id` ASC),
  CONSTRAINT `torrents_ibfk_2`
    FOREIGN KEY (`magnet_id`)
    REFERENCES `mydb`.`magnet_uri` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`books`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`books` (
  `id` INT(11) NOT NULL,
  `author` INT(11) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `isbn` VARCHAR(17) NOT NULL,
  `edition` TINYINT(4) NOT NULL,
  `volume` TINYINT(4) NOT NULL,
  `publisher` INT(11) NOT NULL,
  `category` INT(11) NOT NULL,
  `submitted_by` INT(11) NOT NULL,
  `torrent_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `publishers` (`publisher` ASC),
  INDEX `author` (`author` ASC),
  INDEX `category` (`category` ASC),
  INDEX `submitted_by` (`submitted_by` ASC),
  INDEX `torrent_id` (`torrent_id` ASC),
  CONSTRAINT `authors`
    FOREIGN KEY (`author`)
    REFERENCES `mydb`.`authors` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `category`
    FOREIGN KEY (`category`)
    REFERENCES `mydb`.`categories` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `publishers`
    FOREIGN KEY (`publisher`)
    REFERENCES `mydb`.`publishers` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `submitted_by`
    FOREIGN KEY (`submitted_by`)
    REFERENCES `mydb`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `torrent_id`
    FOREIGN KEY (`torrent_id`)
    REFERENCES `mydb`.`torrents` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`comments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`comments` (
  `id` INT(11) NOT NULL,
  `book_id` INT(11) NOT NULL,
  `user_id` INT(11) NOT NULL,
  `comment` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `book_id` (`book_id` ASC),
  INDEX `user_id` (`user_id` ASC),
  CONSTRAINT `comments_ibfk_2`
    FOREIGN KEY (`user_id`)
    REFERENCES `mydb`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `book_id`
    FOREIGN KEY (`book_id`)
    REFERENCES `mydb`.`books` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`trackers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`trackers` (
  `id` INT(11) NOT NULL,
  `uri` VARCHAR(250) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`magnet_trackers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`magnet_trackers` (
  `magnet_id` INT(11) NOT NULL,
  `tracker_id` INT(11) NOT NULL,
  INDEX `magnet_id` (`magnet_id` ASC),
  INDEX `tracker_id` (`tracker_id` ASC),
  CONSTRAINT `magnet_id`
    FOREIGN KEY (`magnet_id`)
    REFERENCES `mydb`.`magnet_uri` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `tracker_id`
    FOREIGN KEY (`tracker_id`)
    REFERENCES `mydb`.`trackers` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`average_book_age`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`average_book_age` (`avg_book_age` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`book_count`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`book_count` (`book_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`category_books_report`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`category_books_report` (`name` INT, `book_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`comment_book_count`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`comment_book_count` (`comment_count` INT, `book_id` INT, `book_name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`counts_report`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`counts_report` (`authors_count` INT, `publishers_count` INT, `categories_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`most_commented_book`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`most_commented_book` (`comment_count` INT, `book_id` INT, `book_title` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`torrents_timestamp_diff`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`torrents_timestamp_diff` (`diff` INT);

-- -----------------------------------------------------
-- procedure archive_torrents
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`claudi12`@`localhost` PROCEDURE `archive_torrents` (IN `start_updated` TIMESTAMP, IN `end_updated` TIMESTAMP, OUT `archivedcount` INT)  BEGIN
DECLARE done INT DEFAULT 0;
DECLARE archived_count INT;
DECLARE torrent_id INT;
DECLARE torrent_updated TIMESTAMP;
DECLARE c CURSOR FOR SELECT id,date_updated FROM torrents;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
set archived_count=0;

OPEN c;
torrentLoop: LOOP
FETCH c INTO torrent_id,torrent_updated;
IF done = 1 THEN LEAVE torrentLoop; END IF;
IF (torrent_updated > start_updated AND torrent_updated < end_updated)
THEN
	UPDATE torrents SET archived = 1 WHERE id=torrent_id;
    SET archived_count = archived_count+1;
END IF;


END LOOP;
CLOSE c;

select archived_count into `archivedcount`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function age_function
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`claudi12`@`localhost` FUNCTION `age_function` (`book_id` INT) RETURNS VARCHAR(45) CHARSET utf8 BEGIN
 DECLARE age_var VARCHAR(45);
 
SELECT TIME_FORMAT(SEC_TO_TIME(diff*-1),'%Hh %im') INTO age_var from (select TIMESTAMPDIFF(SECOND, NOW(), t.date_added) as diff FROM torrents t inner join books b on b.torrent_id=t.id where b.id=book_id) as time_diff;

RETURN age_var;
 END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `mydb`.`average_book_age`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`average_book_age`;
USE `mydb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`claudi12`@`localhost` SQL SECURITY DEFINER VIEW `average_book_age`  AS  select time_format(sec_to_time((avg(`torrents_timestamp_diff`.`diff`) * -(1))),'%Hh %im') AS `avg_book_age` from `torrents_timestamp_diff`;

-- -----------------------------------------------------
-- View `mydb`.`book_count`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`book_count`;
USE `mydb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`claudi12`@`localhost` SQL SECURITY DEFINER VIEW `book_count`  AS  select count(0) AS `book_count` from `books`;

-- -----------------------------------------------------
-- View `mydb`.`category_books_report`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`category_books_report`;
USE `mydb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`claudi12`@`localhost` SQL SECURITY DEFINER VIEW `category_books_report`  AS  select `c`.`name` AS `name`,count(`books`.`id`) AS `book_count` from (`books` join `categories` `c` on((`c`.`id` = `books`.`category`))) group by `books`.`category`;

-- -----------------------------------------------------
-- View `mydb`.`comment_book_count`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`comment_book_count`;
USE `mydb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`claudi12`@`localhost` SQL SECURITY DEFINER VIEW `comment_book_count`  AS select count(0) AS comment_count,c.book_id AS book_id,b.title as book_name from comments c inner join books b on c.book_id=b.id group by c.book_id;

-- -----------------------------------------------------
-- View `mydb`.`counts_report`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`counts_report`;
USE `mydb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`claudi12`@`localhost` SQL SECURITY DEFINER VIEW `counts_report`  AS  select count(`authors`.`id`) AS `authors_count`,count(`publishers`.`id`) AS `publishers_count`,count(`categories`.`id`) AS `categories_count` from ((`authors` join `publishers`) join `categories`);

-- -----------------------------------------------------
-- View `mydb`.`most_commented_book`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`most_commented_book`;
USE `mydb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`claudi12`@`localhost` SQL SECURITY DEFINER VIEW `most_commented_book`  AS  select max(`comment_book_count`.`comment_count`) AS `comment_count`,`comment_book_count`.`book_id` AS `book_id`, b.title as book_title from `comment_book_count` inner join books b on comment_book_count.book_id=b.id;

-- -----------------------------------------------------
-- View `mydb`.`torrents_timestamp_diff`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`torrents_timestamp_diff`;
USE `mydb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`claudi12`@`localhost` SQL SECURITY DEFINER VIEW `torrents_timestamp_diff`  AS  select timestampdiff(SECOND,now(),`torrents`.`date_added`) AS `diff` from `torrents`;
USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE TRIGGER `archive_book_torrents` BEFORE DELETE ON `books` FOR EACH ROW UPDATE torrents SET archived=1 WHERE id=OLD.torrent_id$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
